{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf810
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red46\green111\blue253;\red0\green0\blue0;\red127\green127\blue127;
\red255\green128\blue0;\red127\green127\blue127;}
{\*\expandedcolortbl;;\csgenericrgb\c18039\c43529\c99216;\csgenericrgb\c0\c0\c0;\csgenericrgb\c49804\c49804\c49804;
\csgenericrgb\c100000\c50000\c0;\csgenericrgb\c49804\c49804\c49804;}
\margl1440\margr1440\vieww18780\viewh9720\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\b\fs36 \cf2 \ul \ulc2 \
MEAN CHEATSHEET\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf2 Javascript:
\fs36 \

\i\b0\fs28 \ulnone You should use Node for what it\'92s good for: making servers capable of handling lots of connections and moving data quickly!\
\

\i0\b\fs24 \cf3 Nodemon filename.js 
\b0 in the terminal will run the code in the filename you specify. Every time you save, it will automatically update in the terminal.\
\

\b Hoisting:\

\b0 Keywords 
\b var
\b0  and 
\b function
\b0  get hoisted to the top. Hoisted variables begin as undefined.\
\
\ul Example:\ulnone \
\cf4 //this will return undefined\cf3 \

\b console.log(hello);\
var hello = 'Whee!';
\b0 \
\
\cf4 //Should be written like this:\cf3 \

\b var hello = 'Whee!';\
console.log(hello);\

\b0 \
When our interpreter finds a function keyword, the entire code block (i.e. everything inside the function\'92s \{\}) is moved to the top of our code (but below any hoisted variables).\
\
\ul Ternary operator:\ulnone \
The ternary operator is extremely useful when you're prepared to do one of two things based on what boolean a condition evaluates to. It's just shorthand that cleans up our code. For example, the below statement says: If the condition is true, log true, else log false.\
\

\b (condition) ? console.log(true) : console.log(false)\
\ul \

\b0 Conditionals:\ulnone \

\b function countDown(number)\{\
  while(number > 0)\{\
    console.log(number);\
    number --;\
  \}\
\}\
countDown(5); 
\b0 \cf4 //the answer is 5,4,3,2,1\
\
\cf3 .forEach loops through something like an array and calls whatever your function is on any object\
\
\pard\pardeftab720\sl340\partightenfactor0
\cf3 Important: variables are hoisted to the top of their scope with an initial value of undefined. Each function has access to all the variables in its parent functions. No function has access to the variables in its child functions.\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf3 An 
\i \ul anonymous function
\i0 \ulnone  is a function that is not stored in a program file, but is associated with a variable whose data type is function_handle . Anonymous functions can accept inputs and return outputs, just as standard functions do. However, they can contain only a single executable statement.\
\

\i \ul Object Constructors
\i0 \ulnone  are just functions that act as blueprints for creating particular objects.\
\

\i \ul Prototype
\i0 \ulnone  is how objects in JavaScript share properties and methods. This is how JavaScript does inheritance.\
	Example:\
\cf4 	// After we create our MyObjConstructor:\cf3 \
	MyObjConstructor.prototype.methodName = function()\{\
\cf4   	     //do stuff here!\cf3 \
	\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf3 \

\b\fs28 \cf2 \ul Mongo DB:\

\b0\fs24 \cf3 \ulnone Start MongoDB Server: (open your terminal and enter the following): 
\b sudo mongod
\b0 \
Open Mongo Terminal: (open another tab in terminal and enter the following): 
\b mongo\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screen Shot 2017-03-15 at 4.39.33 PM.png \width11080 \height2700
}¬}\cf3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2017-03-15 at 4.40.49 PM.png \width12880 \height5860
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2017-03-15 at 4.41.55 PM.png \width13500 \height5660
}¬}\
\

\b \cf5 CREATE:
\b0 \cf0 \

\b db.COLLECTION_NAME.insert(\{YOUR_JSON_DOCUMENT\})\

\i\b0 Example
\i0 : 
\b db.ninjas.insert(\{name: \'93Sara\'94, belt: "black", status: "awesome"\})\
\
\cf5 READ:\cf0 \
db.COLLECTION_NAME.find(\{YOUR_QUERY_DOCUMENT\})\

\i\b0 Example
\i0 : 
\b db.ninjas.find(\{name: \'93Sara\'94\})\
\
\cf5 UPDATE:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 db.COLLECTION_NAME.update(\{QUERY\}, \{FIELDS_TO_UPDATE\}, \{OPTIONS\})\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\i\b0 \cf0 Example
\i0 :
\b  db.ninjas.update(\{name: "Trey"\}, \{$set: \{location: "Mountain View"\}\})\
\
\cf5 DESTROY:\cf0 \
db.COLLECTION_NAME.remove(\{YOUR_QUERY_DOCUMENT\}, BOOLEAN)\

\i\b0 Example
\i0 : 
\b db.ninjas.remove(\{belt: "yellow"\})\
\
\cf5 If you want to find all in a given collection:\cf0 \
db.ninjas.find(\{\}) \cf6 //passing an empty object\
\cf0 db.ninjas.find() \cf6 //passing nothing at all
\b0 \cf3 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf5 If you want to make the results look easier to read:
\b0 \cf3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf3 db.ninjas.find().pretty()\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 To find by object ID:\
\cf3 db.ninjas.find(\{_id: ObjectId("5462a78e514e258182f4c69a")\})\cf0  \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 //Notice: You can't just pass the string of characters, you must pass it as an ObjectId\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 Operators:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf3 To find the Dojos whose number of students is greater than 15, we\'92ll do this query:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf3 db.dojos.find(\{number_of_students: \{$gt: 15\}\})\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 //The \'93$gt\'94 is an operator and a key value pair which means \'93greater than\'94\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 {{\NeXTGraphic Screen Shot 2017-03-15 at 9.41.13 PM.png \width14200 \height4340
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Screen Shot 2017-03-15 at 9.54.55 PM.png \width18760 \height7700
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf4 \
\
}